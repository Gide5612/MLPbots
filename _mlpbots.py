import sys
from asyncio import sleep
from datetime import datetime
from os import execl, listdir
from threading import Timer
from traceback import format_exc

from discord import Embed, Intents, ActivityType, Activity, Member, utils
from discord.ext.commands import Bot, when_mentioned_or, has_permissions
from discord_components import DiscordComponents
from pymongo import MongoClient
from pytz import timezone

BOT = Bot(command_prefix=when_mentioned_or("!"), help_command=None, intents=Intents.all())

DB = MongoClient("")

FOOTERNANE = "–í—Å–µ –ø—Ä–∞–≤–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –ø–æ–Ω–∏! –í–µ—Å—å –º–∏—Ä –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–Ω–∏!"
FOOTERURL = "https://cdn.discordapp.com/attachments/915008263253266472/915449197388525618/NoDRM.png"

JWR, IDS, IDL = 496139824500178964, 868148805722337320, 868150460735971328


def autores():
    try:
        Timer(1, autores).start()
        atime = int(datetime.now(timezone('Europe/Moscow')).strftime("%H%M%S"))
        print(atime)
        if atime == 80000 or atime == 200000:
            execl(sys.executable, "python", "mlpbots.py", *sys.argv[1:])
    except Exception:
        print(format_exc())


async def messages(name, value):
    try:
        await BOT.get_user(JWR).send(embed=Embed(
            title="–°–æ–æ–±—â–µ–Ω–∏–µ!", color=0x008000).add_field(name=name, value=value))
    except Exception:
        print(format_exc())


async def alerts(name, value):
    try:
        await BOT.get_user(JWR).send(embed=Embed(
            title="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!", color=0xFFA500).add_field(name=name, value=value))
    except Exception:
        print(format_exc())


async def errors(name, value, reset=0):
    try:
        await BOT.get_user(JWR).send(embed=Embed(
            title="–û—à–∏–±–∫–∞!", color=0xFF0000).add_field(name=name, value=value))
        if reset == 1:
            execl(sys.executable, "python", "mlpbots.py", *sys.argv[1:])
    except Exception:
        print(format_exc())


@BOT.event
async def on_connect():
    try:
        autores()
    except Exception:
        await errors("–¢–∞–π–º–µ—Ä:", format_exc())


@BOT.event
async def on_ready():
    try:
        DiscordComponents(BOT)
    except Exception:
        await errors("DiscordComponents:", format_exc())
    try:
        await messages(BOT.user, "–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    except Exception:
        await errors("–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞:", format_exc())
    try:
        if BOT.user.id == IDS:
            await BOT.change_presence(activity=Activity(
                type=ActivityType.watching, name="–∑–∞ –≠–∫–≤–µ—Å—Ç—Ä–∏–µ–π..."))
        if BOT.user.id == IDL:
            await BOT.change_presence(activity=Activity(
                type=ActivityType.listening, name="—Ç–∏—à–∏–Ω—É –Ω–æ—á–∏..."))
    except Exception:
        await errors("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞:", format_exc())
    try:
        ok = []
        error = []
        for filename in listdir("./modules"):
            if filename.endswith(".py"):
                cog = filename[:-3]
                try:
                    BOT.load_extension(f"modules.{cog.lower()}")
                    ok.append(cog.title())
                except Exception:
                    error.append(cog.title())
        ok.sort()
        error.sort()
        modules = "**–£—Å–ø–µ—à–Ω–æ:**\n" + "\n".join(x for x in ok)
        if len(error) != 0:
            modules += "\n\n**–ù–µ—É–¥–∞—á–Ω–æ:**\n" + "\n".join(x for x in error)
        await messages("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π:", modules)
    except Exception:
        await errors("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π:", format_exc())
    try:
        for guild in BOT.guilds:
            for member in guild.members:
                user = DB.server.mlpbots.find_one({"_id": member.id})
                if user is not None:
                    delta = datetime.now() - user["–í—Ä–µ–º—è"]
                    if delta.days >= 7:
                        DB.server.mlpbots.update_one({"_id": int(member.id)}, {"$set": {"–°—Ç–∞—Ç—É—Å": "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π"}})
                        try:
                            await member.add_roles(
                                utils.get(BOT.get_guild(798851582800035841).roles, id=967109081733148693))
                        except Exception:
                            pass
                else:
                    try:
                        await member.add_roles(utils.get(
                            BOT.get_guild(798851582800035841).roles, id=967109081733148693))
                    except Exception:
                        pass
    except Exception:
        await errors("–ö–æ–Ω—Ç—Ä–æ–ª—å –∞–∫—Ç–∏–≤–∞:", format_exc())
    try:
        if BOT.user.id == IDS:
            await messages(BOT.user, "–°–Ω–æ–≤–∞ \"–°–º–æ—Ç—Ä–∏—Ç –∑–∞ –≠–∫–≤–µ—Å—Ç—Ä–∏–µ–π...\"")
        if BOT.user.id == IDL:
            await messages(BOT.user, "–°–Ω–æ–≤–∞ \"–°–ª—É—à–∞–µ—Ç —Ç–∏—à–∏–Ω—É –Ω–æ—á–∏...\"")
    except Exception:
        await errors("–°–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:", format_exc())


@BOT.event
async def on_message(message):
    try:
        await BOT.process_commands(message)
    except Exception:
        await errors("process_commands:", format_exc())
    try:
        if message.content.startswith("!cogs"):
            if message.author.bot:
                if message.content.endswith("cjlkzrwuqxcnaznzsx"):
                    await message.delete(delay=1)
                    BOT.unload_extension(f"modules.rainbow")
                    BOT.load_extension(f"modules.rainbow")
    except Exception:
        await errors("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è \"rainbow\":", format_exc())
    try:
        user = DB.server.mlpbots.find_one({"_id": message.author.id})
        if user is None:
            DB.server.mlpbots.insert_one({"_id": int(message.author.id), "–ò–º—è": message.author.name,
                                          "–°—Ç–∞—Ç—É—Å": "–ê–∫—Ç–∏–≤–Ω—ã–π", "–í—Ä–µ–º—è": message.created_at})
        else:
            DB.server.mlpbots.update_one({"_id": int(message.author.id)}, {"$set": {"–°—Ç–∞—Ç—É—Å": "–ê–∫—Ç–∏–≤–Ω—ã–π",
                                                                                    "–í—Ä–µ–º—è": message.created_at}})
        try:
            await message.author.remove_roles(utils.get(BOT.get_guild(798851582800035841).roles, id=967109081733148693))
        except Exception:
            pass
    except Exception:
        await errors("–ó–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–∞:", format_exc())


@BOT.event
async def on_raw_reaction_add(payload):
    try:
        post = await BOT.get_channel(payload.channel_id).fetch_message(payload.message_id)
        like, dlike = 0, 0
        for reaction in post.reactions:
            if reaction.emoji == "üëç":
                like = int(reaction.count)
            if reaction.emoji == "üëé":
                dlike = int(reaction.count)
        ratio = int(DB.server.mlpbots.count_documents({"–°—Ç–∞—Ç—É—Å": "–ê–∫—Ç–∏–≤–Ω—ã–π"}) / 3)
        if like - dlike >= ratio:
            await post.pin()
        if dlike - like >= ratio:
            await post.delete()
    except Exception:
        await errors(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è:", format_exc())


@BOT.event
async def on_member_join(member):
    try:
        e = Embed(title="–í –Ω–∞—à –∫–ª—É–± –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∞—Å—å –º–∏–ª–∞—è –ø–æ–Ω—è—à–∫–∞!", color=0xBA55D3,
                  description=f"–ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º: {member.mention}!")
        e.set_thumbnail(url=member.avatar_url)
        e.set_footer(text=FOOTERNANE, icon_url=FOOTERURL)
        await BOT.get_channel(int(DB.server.mlpbots.find_one({"_id": "–ö–∞–Ω–∞–ª—ã"})["–ë–æ–ª—Ç–∞–ª–∫–∞"])).send(embed=e)
    except Exception:
        await errors("–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫:", format_exc())


# –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@BOT.command(description="0", name="help", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞", brief="–ù–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ", usage="help")
async def helpmenu(ctx):
    try:
        await ctx.message.delete(delay=1)
        e = Embed(title="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥:", color=ctx.author.color)
        list1 = [[x.description for x in BOT.commands], [x.name for x in BOT.commands],
                 [x.help for x in BOT.commands], [x.brief for x in BOT.commands], [x.usage for x in BOT.commands]]
        list2 = []
        i = 0
        while i < len(list1[0]):
            sor = [list1[0][i], list1[1][i], list1[2][i], list1[3][i], list1[4][i]]
            list2.append(sor)
            i += 1
        list2.sort()
        ii = 0
        while ii < len(list2):
            if ctx.message.author.id == JWR:
                if int(list2[ii][0]) <= 9:
                    e.add_field(name=f"{list2[ii][1]}", inline=False,
                                value=f"–û–ø–∏—Å–∞–Ω–∏–µ: {list2[ii][2]}\n–ü–∞—Ä–∞–º–µ—Ç—Ä: {list2[ii][3]}\n–ü—Ä–∏–º–µ—Ä: {list2[ii][4]}")
            elif ctx.message.author.guild_permissions.administrator:
                if int(list2[ii][0]) <= 8:
                    e.add_field(name=f"{list2[ii][1]}", inline=False,
                                value=f"–û–ø–∏—Å–∞–Ω–∏–µ: {list2[ii][2]}\n–ü–∞—Ä–∞–º–µ—Ç—Ä: {list2[ii][3]}\n–ü—Ä–∏–º–µ—Ä: {list2[ii][4]}")
            elif ctx.message.author.guild_permissions.manage_messages:
                if int(list2[ii][0]) <= 7:
                    e.add_field(name=f"{list2[ii][1]}", inline=False,
                                value=f"–û–ø–∏—Å–∞–Ω–∏–µ: {list2[ii][2]}\n–ü–∞—Ä–∞–º–µ—Ç—Ä: {list2[ii][3]}\n–ü—Ä–∏–º–µ—Ä: {list2[ii][4]}")
            else:
                if int(list2[ii][0]) <= 6:
                    e.add_field(name=f"{list2[ii][1]}", inline=False,
                                value=f"–û–ø–∏—Å–∞–Ω–∏–µ: {list2[ii][2]}\n–ü–∞—Ä–∞–º–µ—Ç—Ä: {list2[ii][3]}\n–ü—Ä–∏–º–µ—Ä: {list2[ii][4]}")
            ii += 1
        e.set_footer(text=f"–í –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞–∫ ! –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ @{BOT.user.name}")
        await ctx.send(embed=e, delete_after=60)
        await alerts(ctx.author, f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É: {ctx.command.name}\n–ö–∞–Ω–∞–ª: {ctx.message.channel}")
    except Exception:
        await errors(f"–ö–æ–º–∞–Ω–¥–∞ {ctx.command.name}:", format_exc())


# –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@BOT.command(description="8", name="mods", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π",
             brief="–ù–∏—á–µ–≥–æ/–¢—Ä–∏–≥–≥–µ—Ä/–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è", usage="mods")
@has_permissions(administrator=True)
async def mods(ctx, trigger: str = None, name: str = None):
    try:
        await ctx.message.delete(delay=1)
        desc = {"arts": "–ú–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—é –Ω–æ–≤—ã—Ö –∞—Ä—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ #–∞—Ä—Ç—ã –∏ #—Ç—ë–º–Ω—ã–µ_–∞—Ä—Ç—ã.\n\n"
                        "–ö–æ–º–∞–Ω–¥—ã –≤ –º–æ–¥—É–ª–µ: **!arts**",
                "commands": "–ú–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö. –î–∞–∂–µ –µ—Å–ª–∏ –º–æ–¥—É–ª—å –æ—Ç–∫–ª—é—á–µ–Ω, "
                            "–∫–æ–º–∞–Ω–¥–∞ \"help\", –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è–º–∏ (mods), –∏ –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞ (res) "
                            "–ø–æ –ø—Ä–µ–∂–Ω–µ–º—É –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.",
                "game": "–ú–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏–≥—Ä—É \"–ü–æ—Ö–∏—â–µ–Ω–Ω–∞—è –ø–æ–Ω–∏\" –∏ –≤—Å–µ —á—Ç–æ —Å –Ω–µ–π —Å–≤—è–∑–∞–Ω–Ω–æ.",
                "player": "–ú–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–ª–µ–µ—Ä –≤ –∫–∞–Ω–∞–ª–µ #–≤–µ—á–µ—Ä–∏–Ω–∫–∞ –∏ –≤—Å–µ —á—Ç–æ —Å –Ω–∏–º —Å–≤—è–∑–∞–Ω–Ω–æ.",
                "posts": "–ú–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\", "
                         "–æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Ö –∫–Ω–æ–ø–æ–∫ –∏ –≤—ã–¥–∞—á—É —Ä–æ–ª–µ–π.",
                "rainbow": "–ú–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –Ω–∏–∫–æ–≤. –ü—Ä–æ—â–µ –≥–æ–≤–æ—Ä—è \"–†–∞–¥—É–∂–Ω–∞—è —Ä–æ–ª—å\".\n\n"
                           "–ö–æ–º–∞–Ω–¥—ã –≤ –º–æ–¥—É–ª–µ: **!rainbow**",
                "tetris": "–ú–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –º–∏–Ω–∏-–∏–≥—Ä—É \"–¢–µ—Ç—Ä–∏—Å\" –∏ –≤—Å–µ —á—Ç–æ —Å –Ω–µ–π —Å–≤—è–∑–∞–Ω–Ω–æ.\n\n"
                          "–ö–æ–º–∞–Ω–¥—ã –≤ –º–æ–¥—É–ª–µ: **!tet**"}
        e = None
        if trigger is None and name is None:
            on = []
            off = []
            for cogg in BOT.cogs:
                on.append(cogg.title())
            for filename in listdir("./modules"):
                if filename.endswith(".py"):
                    cogg = filename[:-3]
                    if cogg.title() not in on:
                        off.append(cogg.title())
            on.sort()
            off.sort()
            e = Embed(title="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π:", color=ctx.author.color)
            e.add_field(name="–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", inline=False,
                        value="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è: **!mods –Ω–∞–∑–≤–∞–Ω–∏–µ_–º–æ–¥—É–ª—è**\n"
                              "–í–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å: **!mods on –Ω–∞–∑–≤–∞–Ω–∏–µ_–º–æ–¥—É–ª—è**\n"
                              "–û—Ç–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å: **!mods off –Ω–∞–∑–≤–∞–Ω–∏–µ_–º–æ–¥—É–ª—è**\n"
                              "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å: **!mods res –Ω–∞–∑–≤–∞–Ω–∏–µ_–º–æ–¥—É–ª—è**")
            if len(on) != 0:
                e.add_field(name="–í–∫–ª—é—á–µ–Ω–æ:", inline=False, value=f"\n".join(x for x in on))
            if len(off) != 0:
                e.add_field(name="–û—Ç–∫–ª—é—á–µ–Ω–æ:", inline=False, value=f"\n".join(x for x in off))
        if trigger is not None:
            ok = []
            error = []
            alert = []
            if trigger == "on":
                if name is not None:
                    if name.lower() in [x.lower() for x in BOT.cogs]:
                        alert.append(name.title())
                    else:
                        try:
                            BOT.load_extension(f"modules.{name.lower()}")
                            ok.append(name.title())
                        except Exception:
                            error.append(name.title())
                else:
                    for filename in listdir("./modules"):
                        if filename.endswith(".py"):
                            cogg = filename[:-3]
                            if cogg.lower() in [x.lower() for x in BOT.cogs]:
                                alert.append(cogg.title())
                            else:
                                try:
                                    BOT.load_extension(f"modules.{cogg.lower()}")
                                    ok.append(cogg.title())
                                except Exception:
                                    error.append(cogg.title())
                ok.sort()
                error.sort()
                alert.sort()
                e = Embed(title="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π:", color=ctx.author.color)
                if len(ok) != 0:
                    e.add_field(name="–£—Å–ø–µ—à–Ω–æ:", inline=False, value=f"\n".join(x for x in ok))
                if len(error) != 0:
                    e.add_field(name="–ù–µ—É–¥–∞—á–Ω–æ:", inline=False, value=f"\n".join(x for x in error))
                if len(alert) != 0:
                    e.add_field(name="–û—à–∏–±–∫–∞:", inline=False,
                                value="".join("–ú–æ–¥—É–ª—å \"" + x + "\" —É–∂–µ –≤–∫–ª—é—á–µ–Ω!\n" for x in alert))
            elif trigger == "off":
                if name is not None:
                    if name.lower() not in [x.lower() for x in BOT.cogs]:
                        alert.append(name.title())
                    else:
                        try:
                            BOT.unload_extension(f"modules.{name.lower()}")
                            ok.append(name.title())
                        except Exception:
                            error.append(name.title())
                else:
                    for filename in listdir("./modules"):
                        if filename.endswith(".py"):
                            cogg = filename[:-3]
                            if cogg.lower() not in [x.lower() for x in BOT.cogs]:
                                alert.append(cogg.title())
                            else:
                                try:
                                    BOT.unload_extension(f"modules.{cogg.lower()}")
                                    ok.append(cogg.title())
                                except Exception:
                                    error.append(cogg.title())
                ok.sort()
                error.sort()
                alert.sort()
                e = Embed(title="–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π:", color=ctx.author.color)
                if len(ok) != 0:
                    e.add_field(name="–£—Å–ø–µ—à–Ω–æ:", inline=False, value=f"\n".join(x for x in ok))
                if len(error) != 0:
                    e.add_field(name="–ù–µ—É–¥–∞—á–Ω–æ:", inline=False, value=f"\n".join(x for x in error))
                if len(alert) != 0:
                    e.add_field(name="–û—à–∏–±–∫–∞:", inline=False,
                                value="".join("–ú–æ–¥—É–ª—å \"" + x + "\" —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω!\n" for x in alert))
            elif trigger == "res":
                if name is not None:
                    try:
                        BOT.unload_extension(f"modules.{name.lower()}")
                        BOT.load_extension(f"modules.{name.lower()}")
                        ok.append(name.title())
                    except Exception:
                        error.append(name.title())
                else:
                    for filename in listdir("modules"):
                        if filename.endswith(".py"):
                            cogg = filename[:-3]
                            try:
                                BOT.unload_extension(f"modules.{cogg.lower()}")
                                BOT.load_extension(f"modules.{cogg.lower()}")
                                ok.append(cogg.title())
                            except Exception:
                                error.append(cogg.title())
                ok.sort()
                error.sort()
                e = Embed(title="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π:", color=ctx.author.color)
                if len(ok) != 0:
                    e.add_field(name="–£—Å–ø–µ—à–Ω–æ:", inline=False, value=f"\n".join(x for x in ok))
                if len(error) != 0:
                    e.add_field(name="–ù–µ—É–¥–∞—á–Ω–æ:", inline=False, value=f"\n".join(x for x in error))
            else:
                e = Embed(title=f"–ú–æ–¥—É–ª—å \"{trigger.title()}\":", color=ctx.author.color)
                e.add_field(name="–û–ø–∏—Å–∞–Ω–∏–µ:", inline=False, value=desc[trigger.lower()])
                status = ""
                if trigger.lower() in [x.lower() for x in BOT.cogs]:
                    status = "–í–∫–ª—é—á–µ–Ω"
                else:
                    status = "–û—Ç–∫–ª—é—á–µ–Ω"
                e.add_field(name="–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:", inline=False, value=status)
        e.set_footer(text=FOOTERNANE, icon_url=FOOTERURL)
        await ctx.send(embed=e, delete_after=60)
        await alerts(ctx.author, f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É: {ctx.command.name} {trigger} {name}\n"
                                 f"–ö–∞–Ω–∞–ª: {ctx.message.channel}")
    except Exception:
        await errors(f"–ö–æ–º–∞–Ω–¥–∞ {ctx.command.name}:", format_exc())


@BOT.command(description="8", name="res", help="–ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞", brief="–ù–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ", usage="res")
@has_permissions(administrator=True)
async def res(ctx):
    try:
        await ctx.message.delete(delay=1)
        await alerts(ctx.author, f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É: {ctx.command.name}\n–ö–∞–Ω–∞–ª: {ctx.message.channel}")
        await sleep(1)
        execl(sys.executable, "python", "mlpbots.py", *sys.argv[1:])
    except Exception:
        await errors(f"–ö–æ–º–∞–Ω–¥–∞ {ctx.command.name}:", format_exc())


# —Å–∫—Ä—ã—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã
@BOT.command(description="10", name="ban", help="", brief="", usage="")
async def ban(ctx, member: Member = None):
    try:
        await ctx.message.delete(delay=1)
        e = None
        if member is not None:
            e = Embed(title="–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", color=ctx.author.color,
                      description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member.mention} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω!")
        else:
            e = Embed(title="–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", color=ctx.author.color,
                      description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ {', '.join([user.mention for user in BOT.users])} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω—ã!")
        await ctx.send(embed=e)
    except Exception:
        await errors(f"–ö–æ–º–∞–Ω–¥–∞ {ctx.command.name}:", format_exc())


if __name__ == "__main__":
    try:
        etime = int(datetime.now(timezone('Europe/Moscow')).strftime("%H%M%S"))
        if 80000 <= etime < 200000:
            BOT.run("")
        if 200000 <= etime < 240000 or 0 <= etime < 80000:
            BOT.run("")
    except Exception:
        print(format_exc())
